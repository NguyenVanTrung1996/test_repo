#include <stdio.h>#include <stdlib.h>#include <string.h>#include <unistd.h>#include <sys/types.h>#include <sys/socket.h>#include <netinet/in.h>#include <arpa/inet.h>#include <netdb.h>typedef struct taikhoan{  char username[50];  char password[50];  char code[10];}account;int khoa[10];int giai[10];int k=10;void decode(){    int i,j;    for(i=0;i<k;i++)    for(j=0;j<k;j++) if(khoa[j]==i) giai[i]=j;}void intkhoa(){     int i,j;     for(i=0;i<k;i++)     do       {   //printf("\n nhap khoa khoa[%d]=  ",i);   //scanf("%d",&khoa[i]);     khoa[i]=rand()%10;     j=0;     while((khoa[j]!=khoa[i])&&(khoa[i]<k)) { j=j+1;  }     if(j>=i)       //printf("\n nhap sai roi");     break; }       while(i<k);       for(i=0;i<10;i++)       printf("%d\n",khoa[i]);} /**************************************/char *mahoa(char *chuoi){  int l,i,j,t;  int resid;    char tmp[1024];//*tmp;/*=new char[20];*/    l=strlen(chuoi);    resid = l%k;    //for(i=0;i<resid;i++)    //chuoi[l+i]=' ';    //chuoi[l+resid] = '\0';    //l=l+resid;    //for(i=0;i<l-resid;i++)    j=0;t=0;    for(i=0;i<l-resid;i++)       {        tmp[i]=chuoi[khoa[j]+t*k];j++;        if(j==k) {t++;j=0;}       }    for(i=0;i<resid;i++)      tmp[l-resid+i]=chuoi[l-resid+i];    tmp[l]='\0';    //puts("chuoi ma hoa:");    //printf("%s",tmp);    return tmp;  }    /***************************************/char *giaima(char *chuoi){    int l,i,j,t;    int resid;    char tmp[1024];    decode();    l=strlen(chuoi);    resid = l%k;    j=0;t=0;    for(i=0;i<l-resid;i++)       {        tmp[i]=chuoi[giai[j]+t*k];j++;        if(j==k) {t++;j=0;}       }    for(i=0;i<resid;i++)      tmp[l-resid+i]=chuoi[l-resid+i];    tmp[l]='\0';    //puts("giai ma:");    //printf("%s",tmp);    return tmp;   }  /**************************************/int main(){    FILE*f1, *f2, *f3;    fd_set allSocket;    fd_set readfds;    int max,addr_len,choice,t;    int listener,sockfd;    struct sockaddr_in server_addr, client_addr;    int sin_size;    char send_data[1024], recv_data[1024], tempt[1024],data[1024],name[50],pass[50],code[20];    int bytes_read,i,check,j=0,accnum=0;    account acclist[100];    int key=0,limit=0;    //INIT KHOA    srand(NULL);    intkhoa();    //MO FILE ACCOUNT    f3=fopen("acclist.txt","r");    while(fgets(tempt,50,f3)!=NULL){      if(j==0) 	{	  tempt[strlen(tempt)-1]='\0'; 	  strcpy(acclist[accnum].username,tempt);j=1;	}      else if (j==1)	{	  tempt[strlen(tempt)-1]='\0';	  strcpy(acclist[accnum].password,tempt);j=2;	}      else 	{	  tempt[strlen(tempt)-1]='\0';	  strcpy(acclist[accnum].code,tempt);j=0;accnum++;	}      }    fclose(f3);    //print acc test    puts("list account\n");    for(t=0;t<accnum;t++)      {	printf("name: %s\n",acclist[t].username);	printf("pass: %s\n",acclist[t].password);      }    puts("end list\n");    //ket noi    if((listener = socket(AF_INET, SOCK_STREAM, 0)) == -1)    {        printf("socket() error!\n");        exit(0);    }    server_addr.sin_family = AF_INET;    server_addr.sin_port = htons(5000);    server_addr.sin_addr.s_addr = inet_addr("127.0.0.1");//INADDR_ANY;    bzero(&(server_addr.sin_zero),8);    if(bind(listener, (struct sockaddr*)&server_addr, sizeof(struct sockaddr)) == -1)    {        printf("bind() error!\n");        exit(0);    }    if (listen(listener, 5) == -1)    {        perror("listen");        exit(0);    }    FD_ZERO(&allSocket);    FD_ZERO(&readfds);    FD_SET(listener, &allSocket);    max = listener;    printf("TCPServer waiting for client on port 5000\n");    while(1)    {        readfds = allSocket;        if (select(max+1, &readfds, NULL, NULL, NULL) == -1)        {            perror("select: ");            exit(0);        }	else for(i = 0; i <= max; i++)        {            if (FD_ISSET(i, &readfds))            {                if (i == listener)                {                    sockfd = accept(listener, (struct sockaddr*)&client_addr, &sin_size);                    if (sockfd == -1)                    {                        perror("accept: ");                    }                    else                    {                        FD_SET(sockfd, &allSocket);			printf("Connected with %d\n", sockfd);                        if (sockfd > max)                        {                            max = sockfd;                        }                    }                }                else //if(key==0)                {		   //authentication	            limit=0;		    bytes_read = recv(sockfd,recv_data,1024,0);		    recv_data[bytes_read] = '\0';		    send(sockfd,"dkm",3,0);		    if(strcmp(recv_data,"dk")==0) 		      {			do{			  check =0;			  limit++;			  bytes_read = recv(sockfd,recv_data,1024,0);			  recv_data[bytes_read] = '\0';			  strcpy(name,recv_data);			  send(sockfd,"dkm",3,0);			  bytes_read = recv(sockfd,recv_data,1024,0);			  recv_data[bytes_read] = '\0';			  strcpy(pass,recv_data);			  if(strlen(name)<=50&&strlen(pass)<=50) check=1;			  if(check==1) {send(sockfd,"ok",2,0);puts("ok");}			  else {if(limit<3) send(sockfd,"invalid",7,0);}			}while(check!=1&&limit<3);			if(check==1) {strcpy(acclist[accnum].username,name);strcpy(acclist[accnum].password,pass);			  intkhoa();			  for(t=0;t<k;t++) acclist[accnum].code[i]=khoa[i];			  acclist[accnum].code[k]='\0';}		      }		    else do{			check =0;			limit++;			bytes_read = recv(sockfd,recv_data,1024,0);			recv_data[bytes_read] = '\0';			strcpy(name,recv_data);			send(sockfd,"dkm",3,0);			bytes_read = recv(sockfd,recv_data,1024,0);			recv_data[bytes_read] = '\0';			strcpy(pass,recv_data);			for(j=0;j<accnum;j++)			  {			    if(strcmp(name,acclist[j].username)==0&&strcmp(pass,acclist[j].password)==0) {check =1;strcpy(code,acclist[j].code);}			  }			if(check==1) {send(sockfd,"ok",2,0);puts("ok");}			else {if(limit<3) send(sockfd,"invalid",7,0);}		      }while(check!=1&&limit<3);		    if(limit==3)		      { 			send(sockfd,"stop",4,0);			printf("Ngat ket noi tu %d\n", i);			close(i);			FD_CLR(i, &allSocket);			printf("ban co muon tiep tuc server: y/n");			gets(tempt);			if(strcmp(tempt,"y")==0) return 1;			else break;		      }			    for(t=0;t<10;t++)		      {			khoa[t]=code[t]-'0';		      }		    do{		      		      //nhan yeu cau lua chon giao dich		      //key=1;		      bytes_read = recv(sockfd,recv_data,1024,0);		      recv_data[bytes_read] = '\0';		      send(sockfd,"dkm",3,0);		      if(strcmp(recv_data,"encrypt")==0) choice=1;  //sosanh de dat choice tuong ung theo luachon		      else if(strcmp(recv_data,"decrypt")==0) choice=2; else choice = 3;		      switch(choice)			{			case 1:			  //de mo nhan file			  bytes_read = recv(sockfd,recv_data,1024,0);//r			  recv_data[bytes_read] = '\0';			  send(sockfd,"dkm",3,0);//s			  f1=fopen(recv_data,"w+");			  strcpy(tempt,recv_data);				  bytes_read = recv(sockfd,recv_data,1024,0);//r			  recv_data[bytes_read]= '\0';			  while(strcmp(recv_data,"CLOSE")!=0)			    {			      fputs(recv_data,f1);			      send(sockfd,"dkm",3,0);			      bytes_read = recv(sockfd,recv_data,1024,0);			      recv_data[bytes_read]= '\0';			    }			  fclose(f1);			  printf("Nhan file %s thanh cong!\n",tempt);			  //end de mo nhan file			  			  //bat dau ma hoa			  f1=fopen(tempt,"r+");			  f2=fopen("mahoa.txt","w+");			  if(f1==NULL) {printf("open file error!");break;}			  if(f2==NULL) {printf("open file error!");break;}			  while(fgets(tempt,1024,f1)!=NULL){			    strcpy(data,mahoa(tempt));			    fputs(data,f2);			  }			  fclose(f1);			  fclose(f2);				  //bat dau gui tra file ma hoa			  send(sockfd,"mahoa.txt",9,0);			  bytes_read = recv(sockfd,recv_data,1024,0);			  recv_data[bytes_read] = '\0';			  f1=fopen("mahoa.txt","r");			  while(fgets(send_data,1024,f1)!=NULL)			    {			      send(sockfd,send_data,strlen(send_data),0);			      bytes_read = recv(sockfd,recv_data,1024,0);			      recv_data[bytes_read] = '\0';			    }			  send(sockfd,"CLOSED",5,0);			  fflush(stdout);			  break;			case 2: 			  bytes_read = recv(sockfd,recv_data,1024,0);//r			  recv_data[bytes_read] = '\0';			  puts(recv_data);			  send(sockfd,"dkm",3,0);//s			  f1=fopen(recv_data,"w+");			  strcpy(tempt,recv_data);				  bytes_read = recv(sockfd,recv_data,1024,0);//r			  recv_data[bytes_read]= '\0';			  puts(recv_data);			  while(strcmp(recv_data,"CLOSE")!=0)			    {			      fputs(recv_data,f1);			      send(sockfd,"dkm",3,0);			    bytes_read = recv(sockfd,recv_data,1024,0);			    recv_data[bytes_read]= '\0';			    puts(recv_data);			    }			  fclose(f1);			  printf("Nhan file %s thanh cong!\n",tempt);			  //end de mo nhan file			  			  //bat dau giai ma			  f1=fopen(tempt,"r+");			  f2=fopen("giaima.txt","w+");			  if(f1==NULL) {printf("open file error!");break;}			  if(f2==NULL) {printf("open file error!");break;}			  while(fgets(tempt,1024,f1)!=NULL){			    strcpy(data,giaima(tempt));			    fputs(data,f2);			  }			  fclose(f1);			  fclose(f2);				  //bat dau gui tra file giai ma			  send(sockfd,"giaima.txt",10,0);			  bytes_read = recv(sockfd,recv_data,1024,0);			  recv_data[bytes_read] = '\0';			  f1=fopen("giaima.txt","r");			  while(fgets(send_data,1024,f1)!=NULL)			    {			    send(sockfd,send_data,strlen(send_data),0);			    bytes_read = recv(sockfd,recv_data,1024,0);			    recv_data[bytes_read] = '\0';			    }			  send(sockfd,"CLOSED",5,0);			  fflush(stdout);			  break;			case 3:break;			  			}		    }while(choice!=3);		    printf("Stop connect from %d\n", i);		    close(i);		    FD_CLR(i, &allSocket);		    printf("do you want to stop server: y/n");		    gets(tempt);		    if(strcmp(tempt,"y")==0) return 1;		}	    }	}    }    close(sockfd);}