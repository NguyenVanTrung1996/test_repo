#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>

#include "login.h"
int check(char a[],int n)
{
  int i;
  //  if(a[0]=='a') return 1;
  if(a[0]<'A'||(a[0]>'Z'&&a[0]<'a')||a[0]>'z') return 0;
  for(i=1;i<n;i++)
    {
      if(a[i]<'0'||(a[i]>'9'&&a[i]<'A')||(a[i]>'Z'&&a[i]<'a'&&a[i]!=95)||(a[i]>'z')) return 0;
    }
  return 1;
}
void nhap(int connected)
{
  FILE*f1;
  indexarray arr[26];
  char pwd[1024],name[1024];
  char send_data[1024],recv_data[1024];
  int bytes_recieved;
  user*new;
  f1=fopen("user","a+");
  initarr(arr);
  nhaptufile(f1,arr);
  printds(arr);
  {
    bytes_recieved = recv(connected,recv_data,1024,0);
    recv_data[bytes_recieved] = '\0';
    if (strcmp(recv_data,"3")==0)
      {
	send(connected,"exit",4,0);
        close(connected);
      }
    else if(strcmp(recv_data, "2")==0)
      {
	send(connected,"register",8,0);
       	bytes_recieved = recv(connected,recv_data,1024,0);
	recv_data[bytes_recieved] = '\0';
	if(check(recv_data,bytes_recieved)==0)
	  {
	    strcpy(send_data,"NO");
	    send(connected,send_data,strlen(send_data),0);
	  }
	else
	  {
	    if(search(arr,recv_data)!=NULL)
	      send(connected,"NO1",3,0);
	    else
	      {
		strcpy(name,recv_data);
		strcpy(send_data,"OK");
		send(connected,send_data,strlen(send_data),0);
		bytes_recieved = recv(connected,recv_data,1024,0);
		recv_data[bytes_recieved] = '\0';
		if(check(recv_data,bytes_recieved)==0)
		  {
		    strcpy(send_data,"NO");
		    send(connected,send_data,strlen(send_data),0);
		  }
		else
		  {
		    strcpy(pwd,recv_data);
		    strcpy(send_data,"OK");
		    send(connected,send_data,strlen(send_data),0);
		    bytes_recieved = recv(connected,recv_data,1024,0);
		    recv_data[bytes_recieved] = '\0';
		    if(strcmp(recv_data,pwd)!=0)
		      {
			strcpy(send_data,"NO");
			send(connected,send_data,strlen(send_data),0);
		   }
		    else
		      {
			strcpy(send_data,"OK");
			send(connected,send_data,strlen(send_data),0);
			fprintf(f1,"%s %s\n",name,pwd);
			new=makeuser(name,pwd);
			add(arr,new);
		      }
		  }
	      }
	  }
	nhap(connected);
      }
    else if(strcmp(recv_data,"1")==0)
      {
	send(connected,"login",5,0);
	bytes_recieved = recv(connected,recv_data,1024,0);
	recv_data[bytes_recieved] = '\0';
	strcpy(name,recv_data);
	bytes_recieved = recv(connected,recv_data,1024,0);
	recv_data[bytes_recieved] = '\0';
	strcpy(pwd,recv_data);
	if((new=search(arr,name))==NULL)
	  send(connected,"NO",2,0);
	else
	  {
	    if(strcmp(new->pwd,pwd)!=0)
	      send(connected,"NO",2,0);
	    else send(connected,"YES",3,0);
	  }
	nhap(connected);
      }
    else 
      {
	send(connected,"NO",2,0);
	nhap(connected);
      }
     // printf("\n RECIEVED DATA = %s " , recv_data);
    
   }
  freeds(arr);
  fclose(f1);
  // close(connected);
}

int main()
{
        int sock, connected, bytes_recieved , true = 1;  
        char send_data [1024] , recv_data[1024];       

        struct sockaddr_in server_addr,client_addr;    
        int sin_size;
        
        if ((sock = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
            perror("Socket");
            exit(1);
        }

        if (setsockopt(sock,SOL_SOCKET,SO_REUSEADDR,&true,sizeof(int)) == -1) {
            perror("Setsockopt");
            exit(1);
        }
        
        server_addr.sin_family = AF_INET;         
        server_addr.sin_port = htons(5000);     
        server_addr.sin_addr.s_addr =INADDR_ANY; 
        bzero(&(server_addr.sin_zero),8); 

        if (bind(sock, (struct sockaddr *)&server_addr, sizeof(struct sockaddr))
                                                                       == -1) {
            perror("Unable to bind");
            exit(1);
        }

        if (listen(sock, 5) == -1) {
            perror("Listen");
            exit(1);
        }
		
	printf("\nServer waiting for client on port 5000\n");
        fflush(stdout);
        while(1)
        {  

            sin_size = sizeof(struct sockaddr_in);

            connected = accept(sock, (struct sockaddr *)&client_addr,&sin_size);

            printf("I got a connection from (%s , %d)\n",
                   inet_ntoa(client_addr.sin_addr),ntohs(client_addr.sin_port));
	    send(connected,"menu",4,0);
	    nhap(connected);
	    fflush(stdout);
	    // while (1)
           
        }       

      close(sock);
      return 0;
} 
