// This file is generated by kconfig_compiler from knights.kcfg.
// All changes you do to this file will be lost.

#include "settings.h"

#include <kglobal.h>
#include <QtCore/QFile>

class SettingsHelper
{
  public:
    SettingsHelper() : q(0) {}
    ~SettingsHelper() { delete q; }
    Settings *q;
};
K_GLOBAL_STATIC(SettingsHelper, s_globalSettings)
Settings *Settings::self()
{
  if (!s_globalSettings->q) {
    new Settings;
    s_globalSettings->q->readConfig();
  }

  return s_globalSettings->q;
}

Settings::Settings(  )
  : KConfigSkeleton()
{
  Q_ASSERT(!s_globalSettings->q);
  s_globalSettings->q = this;
  setCurrentGroup( QLatin1String( "KGameTheme" ) );

  KConfigSkeleton::ItemString  *itemTheme;
  itemTheme = new KConfigSkeleton::ItemString( currentGroup(), QLatin1String( "Theme" ), mTheme, QLatin1String( "themes/default.desktop" ) );
  addItem( itemTheme, QLatin1String( "Theme" ) );

  setCurrentGroup( QLatin1String( "Notification Messages" ) );

  KConfigSkeleton::ItemBool  *itemAskDiscard;
  itemAskDiscard = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "askDiscard" ), mAskDiscard, true );
  addItem( itemAskDiscard, QLatin1String( "askDiscard" ) );
  KConfigSkeleton::ItemString  *itemDontAskInternal;
  itemDontAskInternal = new KConfigSkeleton::ItemString( currentGroup(), QLatin1String( "dontAskInternal" ), mDontAskInternal, QLatin1String( "\"\"" ) );
  addItem( itemDontAskInternal, QLatin1String( "dontAskInternal" ) );

  setCurrentGroup( QLatin1String( "Preferences" ) );

  QList<KConfigSkeleton::ItemEnum::Choice2> valuesanimationSpeed;
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("Instant");
    valuesanimationSpeed.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("Fast");
    valuesanimationSpeed.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("Normal");
    valuesanimationSpeed.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("Slow");
    valuesanimationSpeed.append( choice );
  }
  KConfigSkeleton::ItemEnum  *itemAnimationSpeed;
  itemAnimationSpeed = new KConfigSkeleton::ItemEnum( currentGroup(), QLatin1String( "animationSpeed" ), mAnimationSpeed, valuesanimationSpeed, EnumAnimationSpeed::Normal );
  addItem( itemAnimationSpeed, QLatin1String( "animationSpeed" ) );
  KConfigSkeleton::ItemBool  *itemAnimateBoard;
  itemAnimateBoard = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "animateBoard" ), mAnimateBoard, false );
  addItem( itemAnimateBoard, QLatin1String( "animateBoard" ) );
  KConfigSkeleton::ItemBool  *itemFlipBoard;
  itemFlipBoard = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "flipBoard" ), mFlipBoard, true );
  addItem( itemFlipBoard, QLatin1String( "flipBoard" ) );
  QList<KConfigSkeleton::ItemEnum::Choice2> valuesborderDisplayType;
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("None");
    valuesborderDisplayType.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("Border");
    valuesborderDisplayType.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("Notation");
    valuesborderDisplayType.append( choice );
  }
  KConfigSkeleton::ItemEnum  *itemBorderDisplayType;
  itemBorderDisplayType = new KConfigSkeleton::ItemEnum( currentGroup(), QLatin1String( "borderDisplayType" ), mBorderDisplayType, valuesborderDisplayType, EnumBorderDisplayType::None );
  addItem( itemBorderDisplayType, QLatin1String( "borderDisplayType" ) );
  KConfigSkeleton::ItemBool  *itemShowDanger;
  itemShowDanger = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "showDanger" ), mShowDanger, true );
  addItem( itemShowDanger, QLatin1String( "showDanger" ) );
  KConfigSkeleton::ItemBool  *itemShowMarker;
  itemShowMarker = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "showMarker" ), mShowMarker, true );
  addItem( itemShowMarker, QLatin1String( "showMarker" ) );
  KConfigSkeleton::ItemBool  *itemShowMotion;
  itemShowMotion = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "showMotion" ), mShowMotion, true );
  addItem( itemShowMotion, QLatin1String( "showMotion" ) );
  KConfigSkeleton::ItemBool  *itemShowClock;
  itemShowClock = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "showClock" ), mShowClock, true );
  addItem( itemShowClock, QLatin1String( "showClock" ) );
  KConfigSkeleton::ItemBool  *itemShowChat;
  itemShowChat = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "showChat" ), mShowChat, true );
  addItem( itemShowChat, QLatin1String( "showChat" ) );
  KConfigSkeleton::ItemBool  *itemShowConsole;
  itemShowConsole = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "showConsole" ), mShowConsole, false );
  addItem( itemShowConsole, QLatin1String( "showConsole" ) );
  KConfigSkeleton::ItemBool  *itemShowHistory;
  itemShowHistory = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "showHistory" ), mShowHistory, true );
  addItem( itemShowHistory, QLatin1String( "showHistory" ) );

  setCurrentGroup( QLatin1String( "Time Control" ) );

  KConfigSkeleton::ItemInt  *itemTimeLimit;
  itemTimeLimit = new KConfigSkeleton::ItemInt( currentGroup(), QLatin1String( "timeLimit" ), mTimeLimit, 10 );
  addItem( itemTimeLimit, QLatin1String( "timeLimit" ) );
  KConfigSkeleton::ItemInt  *itemTimeIncrement;
  itemTimeIncrement = new KConfigSkeleton::ItemInt( currentGroup(), QLatin1String( "timeIncrement" ), mTimeIncrement, 0 );
  addItem( itemTimeIncrement, QLatin1String( "timeIncrement" ) );
  KConfigSkeleton::ItemInt  *itemNumberOfMoves;
  itemNumberOfMoves = new KConfigSkeleton::ItemInt( currentGroup(), QLatin1String( "numberOfMoves" ), mNumberOfMoves, 40 );
  addItem( itemNumberOfMoves, QLatin1String( "numberOfMoves" ) );
  KConfigSkeleton::ItemBool  *itemTimeEnabled;
  itemTimeEnabled = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "timeEnabled" ), mTimeEnabled, false );
  addItem( itemTimeEnabled, QLatin1String( "timeEnabled" ) );

  setCurrentGroup( QLatin1String( "Protocols" ) );

  QList<KConfigSkeleton::ItemEnum::Choice2> valuesplayer1Protocol;
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("Local");
    valuesplayer1Protocol.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("XBoard");
    valuesplayer1Protocol.append( choice );
  }
  KConfigSkeleton::ItemEnum  *itemPlayer1Protocol;
  itemPlayer1Protocol = new KConfigSkeleton::ItemEnum( currentGroup(), QLatin1String( "player1Protocol" ), mPlayer1Protocol, valuesplayer1Protocol, EnumPlayer1Protocol::Local );
  addItem( itemPlayer1Protocol, QLatin1String( "player1Protocol" ) );
  QList<KConfigSkeleton::ItemEnum::Choice2> valuesplayer2Protocol;
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("Local");
    valuesplayer2Protocol.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("XBoard");
    valuesplayer2Protocol.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("Fics");
    valuesplayer2Protocol.append( choice );
  }
  KConfigSkeleton::ItemEnum  *itemPlayer2Protocol;
  itemPlayer2Protocol = new KConfigSkeleton::ItemEnum( currentGroup(), QLatin1String( "player2Protocol" ), mPlayer2Protocol, valuesplayer2Protocol, EnumPlayer2Protocol::Local );
  addItem( itemPlayer2Protocol, QLatin1String( "player2Protocol" ) );
  QList<KConfigSkeleton::ItemEnum::Choice2> valuescolor;
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("NoColor");
    valuescolor.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("White");
    valuescolor.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("Black");
    valuescolor.append( choice );
  }
  KConfigSkeleton::ItemEnum  *itemColor;
  itemColor = new KConfigSkeleton::ItemEnum( currentGroup(), QLatin1String( "color" ), mColor, valuescolor, EnumColor::NoColor );
  addItem( itemColor, QLatin1String( "color" ) );
  QStringList defaultprograms;
  defaultprograms.append( QString::fromUtf8( "gnuchess" ) );
  defaultprograms.append( QString::fromUtf8( "crafty" ) );

  KConfigSkeleton::ItemStringList  *itemPrograms;
  itemPrograms = new KConfigSkeleton::ItemStringList( currentGroup(), QLatin1String( "programs" ), mPrograms, defaultprograms );
  addItem( itemPrograms, QLatin1String( "programs" ) );
  KConfigSkeleton::ItemString  *itemPlayer1Program;
  itemPlayer1Program = new KConfigSkeleton::ItemString( currentGroup(), QLatin1String( "player1Program" ), mPlayer1Program, QLatin1String( "gnuchess" ) );
  addItem( itemPlayer1Program, QLatin1String( "player1Program" ) );
  KConfigSkeleton::ItemString  *itemPlayer2Program;
  itemPlayer2Program = new KConfigSkeleton::ItemString( currentGroup(), QLatin1String( "player2Program" ), mPlayer2Program, QLatin1String( "gnuchess" ) );
  addItem( itemPlayer2Program, QLatin1String( "player2Program" ) );
  KConfigSkeleton::ItemInt  *itemComputerSearchDepth;
  itemComputerSearchDepth = new KConfigSkeleton::ItemInt( currentGroup(), QLatin1String( "computerSearchDepth" ), mComputerSearchDepth, 29 );
  addItem( itemComputerSearchDepth, QLatin1String( "computerSearchDepth" ) );
  KConfigSkeleton::ItemInt  *itemComputerMemorySize;
  itemComputerMemorySize = new KConfigSkeleton::ItemInt( currentGroup(), QLatin1String( "computerMemorySize" ), mComputerMemorySize, 50 );
  addItem( itemComputerMemorySize, QLatin1String( "computerMemorySize" ) );
  QStringList defaultservers;
  defaultservers.append( QString::fromUtf8( "freechess.org" ) );

  KConfigSkeleton::ItemStringList  *itemServers;
  itemServers = new KConfigSkeleton::ItemStringList( currentGroup(), QLatin1String( "servers" ), mServers, defaultservers );
  addItem( itemServers, QLatin1String( "servers" ) );
  KConfigSkeleton::ItemString  *itemCurrentServer;
  itemCurrentServer = new KConfigSkeleton::ItemString( currentGroup(), QLatin1String( "currentServer" ), mCurrentServer, QLatin1String( "freechess.org" ) );
  addItem( itemCurrentServer, QLatin1String( "currentServer" ) );
  KConfigSkeleton::ItemString  *itemFicsUsername;
  itemFicsUsername = new KConfigSkeleton::ItemString( currentGroup(), QLatin1String( "ficsUsername" ), mFicsUsername );
  addItem( itemFicsUsername, QLatin1String( "ficsUsername" ) );
  KConfigSkeleton::ItemBool  *itemGuest;
  itemGuest = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "guest" ), mGuest, false );
  addItem( itemGuest, QLatin1String( "guest" ) );
  KConfigSkeleton::ItemBool  *itemAutoLogin;
  itemAutoLogin = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "autoLogin" ), mAutoLogin, false );
  addItem( itemAutoLogin, QLatin1String( "autoLogin" ) );
  KConfigSkeleton::ItemInt  *itemComputerDelay;
  itemComputerDelay = new KConfigSkeleton::ItemInt( currentGroup(), QLatin1String( "computerDelay" ), mComputerDelay, 500 );
  addItem( itemComputerDelay, QLatin1String( "computerDelay" ) );
  QStringList defaultengineConfigurations;
  defaultengineConfigurations.append( QString::fromUtf8( "GNU Chess:gnuchess:xboard" ) );
  defaultengineConfigurations.append( QString::fromUtf8( "Crafty:crafty:xboard" ) );
  defaultengineConfigurations.append( QString::fromUtf8( "Stockfish:stockfish:uci" ) );
  defaultengineConfigurations.append( QString::fromUtf8( "Sjeng:sjeng:xboard" ) );

  KConfigSkeleton::ItemStringList  *itemEngineConfigurations;
  itemEngineConfigurations = new KConfigSkeleton::ItemStringList( currentGroup(), QLatin1String( "engineConfigurations" ), mEngineConfigurations, defaultengineConfigurations );
  addItem( itemEngineConfigurations, QLatin1String( "engineConfigurations" ) );

  setCurrentGroup( QLatin1String( "Accessibility" ) );

  KConfigSkeleton::ItemBool  *itemSpeakOpponentsMoves;
  itemSpeakOpponentsMoves = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "speakOpponentsMoves" ), mSpeakOpponentsMoves, true );
  addItem( itemSpeakOpponentsMoves, QLatin1String( "speakOpponentsMoves" ) );
  KConfigSkeleton::ItemBool  *itemAllowExternalControl;
  itemAllowExternalControl = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "allowExternalControl" ), mAllowExternalControl, true );
  addItem( itemAllowExternalControl, QLatin1String( "allowExternalControl" ) );
}

Settings::~Settings()
{
  if (!s_globalSettings.isDestroyed()) {
    s_globalSettings->q = 0;
  }
}

