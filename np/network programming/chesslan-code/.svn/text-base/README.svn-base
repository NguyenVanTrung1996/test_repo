$Revision$

Getting Started:
----------------

 $> tar xjf chesslan_VERSION.tar.bz2
 $> cd chesslan-VERSION
 $> ./configure
 $> make
 $> make install

 $> chesslan

For Developers
==============

1) open a terminal and go to a folder where you would like to use for
coding:
    
    mkdir -p Projects/chesslan
    cd Projects/chesslan

2) checkout the "chesslan" module:

    svn co https://svn.sourceforge.net/svnroot/chesslan chesslan

3) now you can open the project file with Anjuta 2.x:
    
    anjuta trunk/chesslan.anjuta

Requirements:
-------------

gcc
g++
gtkmm-2.4
libgtkmm-2.4-dev
libgnomecanvas-2.6-dev
libsigc++-2.0-dev
libxmlrpc++

Plus the usual sospects for C++ development on Linux/UNIX:
libc6-dev, binutils, all standard headers (libstdc++-dev...), etc...

Also, it seems that autogen.sh (autotools) need cvs installed in order to generate
a Makefile.in file. Thanks to Jeremy Reed for finding this!!

Goals:
------

1) Free peer-to-peer chess over LAN or Public Internet (TCP/IP protocol+ possible 
	XML transport encapsulation)
2) Able to Export and Import PGN format text files
3) allows two computers to connect where one chooses to be the server
	and the other the client (both will eventually act as servers
    "listening" and "responding")
4) allow others to view the game being played by the two main users
	(password protection and SSL encryption will be needed)
5) Nice clean interface
6) Easily portable to other UNICES like MacOS X and FreeBSD, etc...
7) ... open for suggestions...


Developers Information:
-----------------------

Class Hierarchy:

Network - Sends and receive information over the network. All Classes inherit from this
	|	
	|-- Board - Describes the chess board and location for its pieces. Plus history stack functions
	|	|
	|	|-- Pieces - Describes common functions for all pieces.
	|	|		|
	|	|		|-- Pawn - Black and white pawns get created with this ... still devating whether this is
	|	|		|				really necessary.
	|
	
All other files were automatically generated by either Glade-- or Anjuta. Thus, there is no need to
modify those. They describe and build the window plus others. In general, there is a .hh file 
describing all functions for a given class. This file should never be modify (at least not the automatic
ones). Use the .cc files for declaring functions and expanding others. Use the full power of C++
when you want to modify the default behaviour of a base class.

Text editors:
-------------

Anjuta 2 (suggested). Use Gnu Coding Style autoformat.

Vim. Please use the following indentation scheme:

edit ~/.vimrc
...

let IndentStyle = "C"

fun BenIndent()
    let oldLine=line('.')
    " our text (whole file) is passed via STDIN (%) to script name, and the output is
    " placed in current buffer (STDOUT)
    if g:IndentStyle == "C"
        :%!indent --gnu-style --no-tabs --indent-level 8 --case-indentation 0 --brace-indent 0 --comment-delimiters-on-blank-lines --start-left-side-of-comments --format-all-comments --format-first-column-comments
    elseif g:IndentStyle == "perl"
        :%!perltidy -gnu
    elseif g:IndentStyle == "html"
        :%!tidy -quiet -utf8 -indent -clean -asxhtml
    elseif g:IndentStyle == "php"
        :%!tidy -quiet -utf8 -indent -clean 
    elseif g:IndentStyle == "ruby"
        :%!~/.vim/rubybeautifier.rb
    endif
    exe ':' . oldLine
endfun
map -- :call BenIndent()<CR>
...

Now pressing -- will indent the whole file properly.

Theory:
-------

A network socket should not be necessary for regular playing in the local computer (say against
gnucess). Thus, a game can be started from Board without really initializing a network connection. 
Unless one opens a daemon listening on a local socket and use a client-server relationship for all
cases.
