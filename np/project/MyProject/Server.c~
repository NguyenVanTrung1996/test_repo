#include <sys/types.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <netinet/in.h>
#include <netinet/in.h>
#include <sys/time.h>
#include <sys/ioctl.h>
#include <unistd.h>
//#include "user.h"
             
int main(){

  int server_sockfd, client_sockfd;
  int server_len, client_len,bytes_received ;

  struct sockaddr_in server_addr;
  struct sockaddr_in client_addr;
  
  char acc[60];
  int status,dem;
  char recv_data[1024], send_data[1024], recvdata[1024];
  int result;
  int fd;
  int nread;
  struct timeval tv;
  fd_set fdset, testfds;

  server_sockfd = socket(AF_INET, SOCK_STREAM, 0);
  server_addr.sin_family = AF_INET;
  server_addr.sin_addr.s_addr = htonl(INADDR_ANY);
  server_addr.sin_port = htons(1234);
  server_len = sizeof(server_addr);
  
  //Create a TCP/IP socket to use
  if ((server_sockfd = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
    perror("Socket() error");
    exit(1);
  }
  if (bind(server_sockfd, (struct sockaddr *)&server_addr, server_len)== -1) {
    perror("bind() error");
    exit(1);
  }
  if (listen(server_sockfd, 5) == -1) {
    perror("Listen");
    exit(1);
  }

  FD_ZERO(&fdset);    /*clear all bits in fdset*/
  FD_SET(server_sockfd, &fdset);  /*turn on the bit for fd in fdset*/

  while(1) {    
    /* wait until either socket has data ready to be recv()d (timeout 5.5 secs)*/
    tv.tv_sec = 5;
    tv.tv_usec = 500000;
    testfds = fdset;
    printf("Server waiting\n");
    
    result = select(FD_SETSIZE, &testfds, (fd_set *)NULL,(fd_set *)NULL, &tv);
    
    if(result == -1) {
      perror("Select() error");   // error occurred in select() 
      exit(1);
    }
    else if(result == 0){
      printf("Timeout occurred! No data after 5.5 seconds.\n");    
       
    }
    else{
      //Client connected
      for(fd = 0; fd < FD_SETSIZE; fd++){
	if(FD_ISSET(fd,&testfds)) {
	  if(fd == server_sockfd){
	    client_len = sizeof(client_addr);
	    client_sockfd = accept(server_sockfd,(struct sockaddr *)&client_addr, &client_len);
	    FD_SET(client_sockfd, &fdset);
	    printf("Client %d connected !\n", client_sockfd);
	  }
	  else {
	    ioctl(fd, FIONREAD, &nread); //???
	    if(nread != 0) {
	      printf("\nHandling on socket %d\n",fd);
	      bytes_received = recv(fd,recv_data,1024,0);
	      recv_data[bytes_received] = '\0';
	      puts(recv_data);
        if (send(fd, recv_data, strlen(recv_data), 0) != strlen(recv_data)) {
           printf("send() sent a different number of bytes than expected\n");
        }
	      //send(fd,recv_data,1024,0);
	    } 
	    else {
	      close(fd);
	      FD_CLR(fd, &fdset);  /*turn off the bit for fd in fdset*/
	      printf("Not connect client on fd %d\n", fd);
	    }
	  }
	}
      }
    }
  }
  close(server_sockfd);
}
